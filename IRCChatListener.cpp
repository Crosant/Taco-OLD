/*  * File:   IRCChatListener.cpp * Author: Florian *  * Created on 20. Februar 2015, 23:10 */#include "IRCChatListener.h"#include "IRCBot.h"#include "IRCUser.h"#include "IRCCommand.h"#include "IRCConnection.h"using namespace std::literals::chrono_literals;IRCChatListener::IRCChatListener(std::string chan, IRCBot *bot) {    this->chan = chan;    this->bot = bot;    bot->connection->sendToIRC(("JOIN " + chan + "\r\n"));}IRCChatListener::IRCChatListener(const IRCChatListener& orig) {}IRCChatListener::~IRCChatListener() {    bot->connection->sendToIRC("PART " + chan + "\r\n");}void IRCChatListener::Analyze(std::string message){        message = message.substr(0, message.size()-1);        std::string msg, msg2;    std::vector<std::string> parts;    size_t pos = 0;    std::string delimiter = " ";    std::string token;    int i = 0;    while ((pos = message.find(delimiter)) != std::string::npos) {        if(i > 2)            break;        i++;        token = message.substr(0, pos);        parts.push_back(token);        message.erase(0, pos + delimiter.length());            }    msg = message;    msg = msg.replace(0,1,"");    std::vector<std::string> msgparts;    delimiter = " ";    msg2 = msg;            while ((pos = msg.find(delimiter)) != std::string::npos) {                token = msg.substr(0, pos);        msgparts.push_back(token);        msg.erase(0, pos + delimiter.length());            }   IRCUser* user = new IRCUser("", "", 0) ;    for(IRCUser* u : bot->users){        if(boost::iequals(":" + u->name + u->host , parts.at(0)))            user = u;    }    msgparts.push_back(msg);    for(IRCCommand *i : bot->cmds){        std::string s = i->cmd;        if(boost::iequals(msgparts.at(0), s)){            if(user->accessLevel >=  i->accessLvl)                i->CommandRecieved(parts.at(2), msg2);        }            }}